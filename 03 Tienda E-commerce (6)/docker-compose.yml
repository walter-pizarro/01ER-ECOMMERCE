version: '3.8'

services:
  # Backend PHP con Laravel
  backend:
    build:
      context: ./docker/backend
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./backend:/var/www/html
      - ./docker/backend/php.ini:/usr/local/etc/php/conf.d/custom.ini
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=development
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=ecommerce_db
      - DB_USERNAME=ecommerce_user
      - DB_PASSWORD=ecommerce_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - ecommerce_network

  # Frontend Vue.js con Node.js
  frontend:
    build:
      context: ./docker/frontend
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000/api
    networks:
      - ecommerce_network

  # Base de datos MySQL 8.0
  mysql:
    image: mysql:8.0
    container_name: ecommerce_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: ecommerce_user
      MYSQL_PASSWORD: ecommerce_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - ecommerce_network

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecommerce_network

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
    networks:
      - ecommerce_network

  # Elasticsearch para b√∫squeda avanzada
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ecommerce_network

  # Mailhog para testing de emails
  mailhog:
    image: mailhog/mailhog
    container_name: ecommerce_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - ecommerce_network

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:

networks:
  ecommerce_network:
    driver: bridge

